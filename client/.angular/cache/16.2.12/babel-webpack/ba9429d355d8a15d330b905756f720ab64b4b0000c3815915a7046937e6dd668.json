{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, cookieService, router) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.router = router;\n    this.apiUrl = 'https://fantaf1.chiglia.ovh';\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials);\n  }\n  isLoggedIn() {\n    return this.cookieService.check('userID');\n  }\n  register(credentials) {\n    return this.http.post(`${this.apiUrl}/register`, credentials);\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/logout`, {});\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","cookieService","router","apiUrl","login","credentials","post","isLoggedIn","check","register","logout","_","i0","ɵɵinject","i1","HttpClient","i2","CookieService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/chiglia/fantaf1-16/fantaf1/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://fantaf1.chiglia.ovh';\n\n  constructor(private http: HttpClient,private cookieService: CookieService, private router: Router) {}\n\n  login(credentials: any): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/login`, credentials);\n  }\n  isLoggedIn(): boolean {\n    return this.cookieService.check('userID');\n  }\n  register(credentials: any):Observable<any>{\n    return this.http.post<any>(`${this.apiUrl}/register`, credentials);\n  }\n\n  logout(): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/logout`, {});\n  }\n\n}\n"],"mappings":";;;;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB,EAASC,aAA4B,EAAUC,MAAc;IAA7E,KAAAF,IAAI,GAAJA,IAAI;IAAqB,KAAAC,aAAa,GAAbA,aAAa;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAFjF,KAAAC,MAAM,GAAG,6BAA6B;EAEsD;EAEpGC,KAAKA,CAACC,WAAgB;IACpB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEE,WAAW,CAAC;EACjE;EACAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,aAAa,CAACO,KAAK,CAAC,QAAQ,CAAC;EAC3C;EACAC,QAAQA,CAACJ,WAAgB;IACvB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEE,WAAW,CAAC;EACpE;EAEAK,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACV,IAAI,CAACM,IAAI,CAAM,GAAG,IAAI,CAACH,MAAM,SAAS,EAAE,EAAE,CAAC;EACzD;EAAC,QAAAQ,CAAA,G;qBAjBUb,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXtB,WAAW;IAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}