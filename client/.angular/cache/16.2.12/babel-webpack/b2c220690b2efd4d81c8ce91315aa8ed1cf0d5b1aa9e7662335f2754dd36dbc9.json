{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { ANONYMOUS_USER } from \"../api/models/user-data\";\nimport { parseJwt } from \"../utils/json\";\nexport let AuthService = class AuthService {\n  set user(user) {\n    this._user$.next(user);\n  }\n  get user() {\n    return this._user$.getValue();\n  }\n  constructor() {\n    this._user$ = new BehaviorSubject(ANONYMOUS_USER);\n    this.user$ = this._user$.asObservable();\n    this.autoLogin();\n  }\n  setSession(authToken) {\n    const user = parseJwt(authToken);\n    localStorage.setItem(\"auth_token\", authToken);\n    localStorage.setItem(\"expires_at\", JSON.stringify(user.exp * 1000));\n    if (authToken && this.isLoggedIn()) {\n      const parsed = parseJwt(authToken);\n      console.log(\"authToken\", authToken);\n      console.log(\"parsed\", parsed);\n      this.user = parsed;\n    }\n    return this.user$;\n  }\n  autoLogin() {\n    const authToken = localStorage.getItem(\"auth_token\");\n    if (authToken && this.isLoggedIn()) {\n      const parsed = parseJwt(authToken);\n      console.log(\"authToken\", authToken);\n      console.log(\"parsed\", parsed);\n      this.user = parsed;\n    }\n    // ToDo: Where is the logic for redirecting the user to the login on token expire?\n    return this.user$;\n  }\n  logout() {\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"expires_at\");\n    this.user = null;\n  }\n  isLoggedIn() {\n    const expiration = localStorage.getItem(\"expires_at\");\n    const expiresAt = parseInt(JSON.parse(expiration || \"0\"));\n    return new Date().getTime() < expiresAt;\n  }\n  isLoggedOut() {\n    return !this.isLoggedIn();\n  }\n  static #_ = this.ctorParameters = () => [];\n};\nAuthService = __decorate([Injectable({\n  providedIn: \"root\"\n})], AuthService);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}